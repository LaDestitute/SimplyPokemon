package com.aquatictyphoon.pokemonmod.setup.entities;

import com.aquatictyphoon.pokemonmod.setup.entities.pokemon.PokemonEntity;
import com.aquatictyphoon.pokemonmod.setup.pokeballs.PartyPokeballProvider;
import com.aquatictyphoon.pokemonmod.setup.pokeballs.PartyStorage;
import net.minecraft.core.BlockPos;
import net.minecraft.nbt.CompoundTag;
import net.minecraft.network.chat.Component;
import net.minecraft.network.syncher.EntityDataAccessor;
import net.minecraft.network.syncher.EntityDataSerializers;
import net.minecraft.network.syncher.SynchedEntityData;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.world.entity.Entity;
import net.minecraft.world.entity.EntityType;
import net.minecraft.world.entity.LivingEntity;
import net.minecraft.world.entity.animal.Pig;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.entity.projectile.ThrowableItemProjectile;
import net.minecraft.world.item.Item;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.level.Level;
import net.minecraft.world.phys.BlockHitResult;
import net.minecraft.world.phys.EntityHitResult;
import net.minecraftforge.items.ItemHandlerHelper;
import net.minecraftforge.registries.ForgeRegistries;
import org.jetbrains.annotations.NotNull;

import javax.annotation.Nonnull;
import java.util.Random;
import java.util.UUID;

import static com.aquatictyphoon.pokemonmod.PokemonMod.*;

public class PokeballEntity extends ThrowableItemProjectile {

    private static final EntityDataAccessor<Boolean> THROWN = SynchedEntityData.defineId(PokeballEntity.class, EntityDataSerializers.BOOLEAN);
    private static final EntityDataAccessor<Boolean> ISREMOVED = SynchedEntityData.defineId(PokeballEntity.class, EntityDataSerializers.BOOLEAN);

    public PokeballEntity(EntityType<PokeballEntity> type, Level level) {
        super(type, level);
    }

    protected void defineSynchedData() {
        super.defineSynchedData();
        this.entityData.define(THROWN, false);
        this.entityData.define(ISREMOVED, false);
    }

    void setEntityIsRemoved(Boolean value){
        this.entityData.set(ISREMOVED, value);
    }

    public void setIsThrown(Boolean value){
        this.entityData.set(THROWN, value);
    }

    public Boolean getIsThrown() {
        return this.entityData.get(THROWN);
    }

    public void addAdditionalSaveData(@NotNull CompoundTag pCompound) {
        super.addAdditionalSaveData(pCompound);
        pCompound.putBoolean("NAME", getIsThrown());

    }
    public void readAdditionalSaveData(CompoundTag pCompound) {
        this.setIsThrown((pCompound.getBoolean("IS_REMOVED")));
        super.readAdditionalSaveData(pCompound);
    }
    public PokeballEntity(LivingEntity entity, Level level, ItemStack pStack, PokemonEntity storedSlotEntity) {
        super(POKE_BALL.get(), entity, level);
        this.setOwner(entity);
        pStack.setCount(1);
        Player player = (Player) this.getOwner();
        if(player == null){
            return;
        }

        Entity monFromBall = getEntityFromStack(pStack, player.level);

        if(monFromBall == null){
            return;
        }

        Entity entityInWorld = ((ServerLevel) level).getEntity(monFromBall.getUUID());


        if(entityInWorld != null && entityInWorld.isRemoved()) {
            this.setEntityIsRemoved(true);
        }

        //System.out.println(entityInWorld);


        if (entityInWorld != null && !getIsThrown()) {
            CompoundTag nbt = new CompoundTag();

            String PokeName = String.valueOf(entityInWorld.getPersistentData().get("NAME"));
            nbt.putString("NAME", PokeName);

            int PokeLevel = entityInWorld.getPersistentData().getTagType("POKE_LEVEL");
            nbt.putInt("POKE_LEVEL", PokeLevel);

            int EntitySize = entityInWorld.getPersistentData().getTagType("ENTITY_SIZE");
            nbt.putInt("ENTITY_SIZE", EntitySize);

            int species = entityInWorld.getPersistentData().getTagType("CURRENT_SPECIES");
            nbt.putInt("CURRENT_SPECIES", species);

            int IVS_HP =  entityInWorld.getPersistentData().getTagType("IVS_HP");
            int IVS_ATTACK =   entityInWorld.getPersistentData().getTagType("IVS_ATTACK");
            int IVS_DEFENCE =   entityInWorld.getPersistentData().getTagType("IVS_DEFENCE");
            int IVS_SPECIAL_ATTACK =   entityInWorld.getPersistentData().getTagType("IVS_SPECIAL_ATTACK");
            int IVS_SPECIAL_DEFENCE =   entityInWorld.getPersistentData().getTagType("IVS_SPECIAL_DEFENCE");
            int IVS_SPEED =   entityInWorld.getPersistentData().getTagType("IVS_SPEED");

            nbt.putInt("IVS_HP", IVS_HP);
            nbt.putInt("IVS_ATTACK", IVS_ATTACK);
            nbt.putInt("IVS_DEFENCE", IVS_DEFENCE);
            nbt.putInt("IVS_SPECIAL_ATTACK", IVS_SPECIAL_ATTACK);
            nbt.putInt("IVS_SPECIAL_DEFENCE", IVS_SPECIAL_DEFENCE);
            nbt.putInt("IVS_SPEED", IVS_SPEED);

            int EVS_HP =  entityInWorld.getPersistentData().getTagType("EVS_HP");
            int EVS_ATTACK =   entityInWorld.getPersistentData().getTagType("EVS_ATTACK");
            int EVS_DEFENCE =   entityInWorld.getPersistentData().getTagType("EVS_DEFENCE");
            int EVS_SPECIAL_ATTACK =   entityInWorld.getPersistentData().getTagType("EVS_SPECIAL_ATTACK");
            int EVS_SPECIAL_DEFENCE =   entityInWorld.getPersistentData().getTagType("EVS_SPECIAL_DEFENCE");
            int EVS_SPEED =   entityInWorld.getPersistentData().getTagType("EVS_SPEED");

            nbt.putInt("EVS_HP", EVS_HP);
            nbt.putInt("EVS_ATTACK", EVS_ATTACK);
            nbt.putInt("EVS_DEFENCE", EVS_DEFENCE);
            nbt.putInt("EVS_SPECIAL_ATTACK", EVS_SPECIAL_ATTACK);
            nbt.putInt("EVS_SPECIAL_DEFENCE", EVS_SPECIAL_DEFENCE);
            nbt.putInt("EVS_SPEED", EVS_SPEED);

            int NATURE = entityInWorld.getPersistentData().getTagType("NATURE");
            int GENDER = entityInWorld.getPersistentData().getTagType("GENDER");
            nbt.putInt("NATURE", NATURE);
            nbt.putInt("GENDER", GENDER);

            byte SHINYNESS = (entityInWorld.getPersistentData().getTagType("SHINYNESS"));
            nbt.putByte("SHINYNESS", SHINYNESS);

            String entityID = EntityType.getKey(entityInWorld.getType()).toString();
            UUID TargetUUID = entityInWorld.getUUID();
            nbt.putString("UUID", String.valueOf(TargetUUID));
            nbt.putString("entity", entityID);
            nbt.putString("id", EntityType.getKey(entityInWorld.getType()).toString());

            entityInWorld.save(nbt);
            this.getItem().setTag(nbt);

            entityInWorld.setRemoved(RemovalReason.DISCARDED);
            this.setRemoved(RemovalReason.DISCARDED);
            setIsThrown(true);
        }

    }

    protected @NotNull Item getDefaultItem() {
        return (POKEBALL_ITEM.get());
    }

    public boolean containsEntity(@Nonnull ItemStack itemStack) {
        if (!itemStack.hasTag()) return false;
        assert itemStack.getTag() != null;
        return itemStack.getTag().contains("CURRENT_SPECIES");
    }

    public Entity getEntityFromStack(@Nonnull ItemStack itemStack, Level world) {
        Entity entity = (ForgeRegistries.ENTITY_TYPES.getValue(new ResourceLocation(itemStack.getOrCreateTag().getString("entity")))).create(world);
        entity.load(itemStack.getTag());
        if(entity instanceof Pig){
            return null;
        }
        return entity;
    }

    protected void onHitEntity(EntityHitResult result) {
        Entity target = result.getEntity();
        Random random = new Random();

        if (result.getType() == EntityHitResult.Type.ENTITY && (!(result.getEntity() instanceof Player)) && ((result.getEntity() instanceof PokemonEntity))){
            int catchrate = ((PokemonEntity) target).getCatchrate();
            if (!level.isClientSide) {
                if ((containsEntity(this.getItem())) && target.isAlive() && !getIsThrown()) {
                    Entity entity = getEntityFromStack(this.getItem(), target.level);
                    if(entity == null){
                        return;
                    }
                    BlockPos blockPos = this.blockPosition();
                    entity.absMoveTo(blockPos.getX(), blockPos.getY(), BlockPos.getZ(+1), 0, 0);
                    level.addFreshEntity(entity);
                }
                if((this.getItem().getTag() == null)){
                    return;
                }

                if((this.getItem().getTag().getFloat("ballBonus") == 0)){
                    return;
                }

                float maxHP = ((PokemonEntity)target).getMaxHealth();
                float currentHP = ((PokemonEntity)target).getHealth();
                float ballBonus =  this.getItem().getTag().getFloat("ballBonus");
                float statusBonus = 1;


                float calculatedCatch = (( ((((3 * (maxHP) ) - 2 *(currentHP)  ) * catchrate * ballBonus) / 3 * maxHP) * statusBonus) / 255);

                if (!containsEntity(this.getItem()) && (target.isAlive()) && !((PokemonEntity)target).isTame()  && random.nextInt(256) <= calculatedCatch)
                {
                    Player player = (Player) this.getOwner();
                    if(player == null){
                        return;
                    }

                    ((PokemonEntity) target).tame((Player) this.getOwner());
                    CompoundTag nbt = new CompoundTag();

                    String PokeName = String.valueOf(target.getPersistentData().get("NAME"));
                    nbt.putString("NAME", PokeName);

                    int PokeLevel = target.getPersistentData().getTagType("POKE_LEVEL");
                    nbt.putInt("POKE_LEVEL", PokeLevel);

                    int EntitySize = target.getPersistentData().getTagType("ENTITY_SIZE");
                    nbt.putInt("ENTITY_SIZE", EntitySize);

                    int species = target.getPersistentData().getTagType("CURRENT_SPECIES");
                    nbt.putInt("CURRENT_SPECIES", species);

                    int IVS_HP =  target.getPersistentData().getTagType("IVS_HP");
                    int IVS_ATTACK =   target.getPersistentData().getTagType("IVS_ATTACK");
                    int IVS_DEFENCE =   target.getPersistentData().getTagType("IVS_DEFENCE");
                    int IVS_SPECIAL_ATTACK =   target.getPersistentData().getTagType("IVS_SPECIAL_ATTACK");
                    int IVS_SPECIAL_DEFENCE =   target.getPersistentData().getTagType("IVS_SPECIAL_DEFENCE");
                    int IVS_SPEED =   target.getPersistentData().getTagType("IVS_SPEED");

                    nbt.putInt("IVS_HP", IVS_HP);
                    nbt.putInt("IVS_ATTACK", IVS_ATTACK);
                    nbt.putInt("IVS_DEFENCE", IVS_DEFENCE);
                    nbt.putInt("IVS_SPECIAL_ATTACK", IVS_SPECIAL_ATTACK);
                    nbt.putInt("IVS_SPECIAL_DEFENCE", IVS_SPECIAL_DEFENCE);
                    nbt.putInt("IVS_SPEED", IVS_SPEED);

                    int EVS_HP =  target.getPersistentData().getTagType("EVS_HP");
                    int EVS_ATTACK =   target.getPersistentData().getTagType("EVS_ATTACK");
                    int EVS_DEFENCE =   target.getPersistentData().getTagType("EVS_DEFENCE");
                    int EVS_SPECIAL_ATTACK =   target.getPersistentData().getTagType("EVS_SPECIAL_ATTACK");
                    int EVS_SPECIAL_DEFENCE =   target.getPersistentData().getTagType("EVS_SPECIAL_DEFENCE");
                    int EVS_SPEED =   target.getPersistentData().getTagType("EVS_SPEED");

                    nbt.putInt("EVS_HP", EVS_HP);
                    nbt.putInt("EVS_ATTACK", EVS_ATTACK);
                    nbt.putInt("EVS_DEFENCE", EVS_DEFENCE);
                    nbt.putInt("EVS_SPECIAL_ATTACK", EVS_SPECIAL_ATTACK);
                    nbt.putInt("EVS_SPECIAL_DEFENCE", EVS_SPECIAL_DEFENCE);
                    nbt.putInt("EVS_SPEED", EVS_SPEED);

                    int NATURE = target.getPersistentData().getTagType("NATURE");
                    int GENDER = target.getPersistentData().getTagType("GENDER");
                    nbt.putInt("NATURE", NATURE);
                    nbt.putInt("GENDER", GENDER);


                    byte SHINYNESS = (target.getPersistentData().getTagType("SHINYNESS"));
                    nbt.putByte("SHINYNESS", SHINYNESS);

                    byte NICKNAMED = (target.getPersistentData().getTagType("NICKNAMED"));
                    nbt.putByte("NICKNAMED", NICKNAMED);

                    String entityID = EntityType.getKey(target.getType()).toString();
                    UUID TargetUUID = target.getUUID();
                    nbt.putString("UUID", String.valueOf(TargetUUID));
                    nbt.putString("entity", entityID);
                    nbt.putString("id", EntityType.getKey(target.getType()).toString());

                    target.save(nbt);
                    ItemStack owned_ball = new ItemStack(this.getItem().getItem());
                    owned_ball.setTag(nbt);
                    owned_ball.setCount(1);
                   // ItemHandlerHelper.giveItemToPlayer(player, owned_ball);
                    Entity entityFromStack = getEntityFromStack(owned_ball, player.level);
                    PokemonEntity monFromBall = (PokemonEntity) entityFromStack;

                    PartyStorage.setIncomingSlot(monFromBall, 1);


                    target.discard();
                    //System.out.println("CAPTURE SUCCESS!");
                }
                if(!containsEntity(this.getItem()) && (target.isAlive()) && !((PokemonEntity)target).isTame()  && random.nextInt(256) >= calculatedCatch)        {
                    Player player = (Player) this.getOwner();
                    if(player == null){
                        return;
                    }
                    player.displayClientMessage( Component.translatable("Oh no! The " + ((PokemonEntity) target).getPokeName() + " broke free!"), true);
                    this.setRemoved(RemovalReason.DISCARDED);
                    setIsThrown(true);
                }
            }
        }
    }


    protected void onHitBlock(@NotNull BlockHitResult result) {
        Player player = (Player) this.getOwner();
        if (player == null) {
            return;
        }

        if (!level.isClientSide) {
            Entity monFromBall = getEntityFromStack(this.getItem(), player.level);

            if(monFromBall == null){
                return;
            }
            if (containsEntity(this.getItem()) && !getIsThrown() && monFromBall.isAlive()) {

                BlockPos blockPos = this.blockPosition();
                monFromBall.absMoveTo(blockPos.getX(), blockPos.getY(), blockPos.getZ(), 0, 0);
                level.addFreshEntity(monFromBall);
            }
            this.setRemoved(RemovalReason.DISCARDED);
            setIsThrown(true);
        }
    }

}

